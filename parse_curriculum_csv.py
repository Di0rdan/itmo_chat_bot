#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import pandas as pd
import json
import re
from typing import Dict, List, Any
from pathlib import Path

def parse_curriculum_csv(csv_file_path: str) -> Dict[str, Any]:
    """
    –ü–∞—Ä—Å–∏—Ç CSV —Ñ–∞–π–ª —É—á–µ–±–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    """
    # –ó–∞–≥—Ä—É–∂–∞–µ–º CSV —Ñ–∞–π–ª
    df = pd.read_csv(csv_file_path, header=None, encoding='utf-8')
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    df = df.fillna('')
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
    program_title = df.iloc[0, 0] if len(df) > 0 else "–£—á–µ–±–Ω—ã–π –ø–ª–∞–Ω"
    
    # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è JSON
    curriculum_data = {
        "program_info": {
            "title": program_title,
            "university": "–ò–¢–ú–û",
            "level": "–º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞",
            "total_credits": 0,
            "total_hours": 0
        },
        "blocks": []
    }
    
    current_block = None
    current_module = None
    
    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å—Ç—Ä–æ–∫–∞–º
    for index, row in df.iterrows():
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        if row.isna().all() or (row == '').all():
            continue
            
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫–æ–ª–æ–Ω–æ–∫
        col1 = str(row.iloc[0]).strip() if pd.notna(row.iloc[0]) else ""
        col2 = str(row.iloc[1]).strip() if pd.notna(row.iloc[1]) else ""
        col3 = str(row.iloc[2]).strip() if pd.notna(row.iloc[2]) else ""
        col4 = str(row.iloc[3]).strip() if pd.notna(row.iloc[3]) else ""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Ç—Ä–æ–∫–∏ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ
        
        # –ë–ª–æ–∫ 1-4 (–æ—Å–Ω–æ–≤–Ω—ã–µ –±–ª–æ–∫–∏) - –∏—â–µ–º –≤ –∫–æ–ª–æ–Ω–∫–µ 2
        if col1 == "" and "–ë–ª–æ–∫" in col2 and re.match(r"–ë–ª–æ–∫ \d+\.", col2):
            if current_block:
                curriculum_data["blocks"].append(current_block)
            
            block_match = re.match(r"–ë–ª–æ–∫ (\d+)\. (.+)", col2)
            if block_match:
                block_num = int(block_match.group(1))
                block_name = block_match.group(2)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞—á–µ—Ç–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –∏ —á–∞—Å—ã
                try:
                    credits = float(col3) if col3 else 0
                    hours = int(col4) if col4 else 0
                except ValueError:
                    credits = 0
                    hours = 0
                
                current_block = {
                    "block_number": block_num,
                    "block_name": block_name,
                    "total_credits": credits,
                    "total_hours": hours,
                    "modules": []
                }
                current_module = None
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–µ —Å—É–º–º—ã
                curriculum_data["program_info"]["total_credits"] += credits
                curriculum_data["program_info"]["total_hours"] += hours
        
        # –ú–æ–¥—É–ª–∏ –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–æ–≤ - –∏—â–µ–º –≤ –∫–æ–ª–æ–Ω–∫–µ 2 (–±–µ–∑ –¥–≤–æ–µ—Ç–æ—á–∏—è)
        elif col1 == "" and col2 and not col2.startswith("–ë–ª–æ–∫") and not re.match(r"^\d+$", col2) and col3 and col4:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ (–Ω–µ—Ç –Ω–æ–º–µ—Ä–∞ –≤ col1)
            if current_block:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞—á–µ—Ç–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –∏ —á–∞—Å—ã
                try:
                    credits = float(col3) if col3 else 0
                    hours = int(col4) if col4 else 0
                except ValueError:
                    credits = 0
                    hours = 0
                
                # –ï—Å–ª–∏ —ç—Ç–æ –º–æ–¥—É–ª—å (–µ—Å—Ç—å –∑–∞—á–µ—Ç–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –∏ —á–∞—Å—ã)
                if credits > 0 or hours > 0:
                    current_module = {
                        "module_name": col2,
                        "credits": credits,
                        "hours": hours,
                        "disciplines": []
                    }
                    current_block["modules"].append(current_module)
        
        # –î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã —Å –Ω–æ–º–µ—Ä–æ–º —Å–µ–º–µ—Å—Ç—Ä–∞ –≤ –∫–æ–ª–æ–Ω–∫–µ 1
        elif col1 and re.match(r"^\d+$", col1) and col2 and col3 and col4:
            try:
                semester_num = int(col1)
                credits = float(col3) if col3 else 0
                hours = int(col4) if col4 else 0
                
                discipline = {
                    "semester": semester_num,
                    "name": col2,
                    "credits": credits,
                    "hours": hours
                }
                
                if current_module:
                    current_module["disciplines"].append(discipline)
                
            except ValueError:
                pass
        
        # –î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –±–µ–∑ –Ω–æ–º–µ—Ä–∞ (–ø–æ–¥–º–æ–¥—É–ª–∏)
        elif col1 == "" and col2 and not col2.startswith("–ë–ª–æ–∫") and not re.match(r"^\d+$", col2) and col3 and col4:
            try:
                credits = float(col3) if col3 else 0
                hours = int(col4) if col4 else 0
                
                # –ï—Å–ª–∏ —ç—Ç–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ (–µ—Å—Ç—å –∑–∞—á–µ—Ç–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –∏ —á–∞—Å—ã)
                if credits > 0 or hours > 0:
                    discipline = {
                        "name": col2,
                        "credits": credits,
                        "hours": hours
                    }
                    
                    if current_module:
                        current_module["disciplines"].append(discipline)
                
            except ValueError:
                pass
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫
    if current_block:
        curriculum_data["blocks"].append(current_block)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    curriculum_data["summary"] = extract_summary_info(curriculum_data)
    
    return curriculum_data

def extract_summary_info(curriculum_data: Dict[str, Any]) -> Dict[str, Any]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–≤–æ–¥–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —É—á–µ–±–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
    """
    summary = {
        "total_disciplines": 0,
        "semesters_count": 4,  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ –¥–ª—è –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã
        "blocks_count": len(curriculum_data["blocks"]),
        "modules_count": 0,
        "practical_work": {
            "total_credits": 0,
            "total_hours": 0
        },
        "theoretical_work": {
            "total_credits": 0,
            "total_hours": 0
        },
        "semester_distribution": {
            "semester_1": {"credits": 0, "hours": 0, "disciplines": 0},
            "semester_2": {"credits": 0, "hours": 0, "disciplines": 0},
            "semester_3": {"credits": 0, "hours": 0, "disciplines": 0},
            "semester_4": {"credits": 0, "hours": 0, "disciplines": 0}
        }
    }
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    for block in curriculum_data["blocks"]:
        summary["modules_count"] += len(block["modules"])
        
        for module in block["modules"]:
            summary["total_disciplines"] += len(module.get("disciplines", []))
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫—É—é –∏ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫—É—é —Ä–∞–±–æ—Ç—É
            if "–ø—Ä–∞–∫—Ç–∏–∫–∞" in module["module_name"].lower() or "–ø—Ä–∞–∫—Ç–∏–∫" in module["module_name"].lower():
                summary["practical_work"]["total_credits"] += module["credits"]
                summary["practical_work"]["total_hours"] += module["hours"]
            else:
                summary["theoretical_work"]["total_credits"] += module["credits"]
                summary["theoretical_work"]["total_hours"] += module["hours"]
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–µ–º–µ—Å—Ç—Ä–∞–º
            for discipline in module.get("disciplines", []):
                if "semester" in discipline:
                    semester_key = f"semester_{discipline['semester']}"
                    if semester_key in summary["semester_distribution"]:
                        summary["semester_distribution"][semester_key]["credits"] += discipline["credits"]
                        summary["semester_distribution"][semester_key]["hours"] += discipline["hours"]
                        summary["semester_distribution"][semester_key]["disciplines"] += 1
    
    return summary

def clean_module_names(curriculum_data: Dict[str, Any]) -> Dict[str, Any]:
    """
    –û—á–∏—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥—É–ª–µ–π –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    """
    for block in curriculum_data["blocks"]:
        for module in block["modules"]:
            # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è
            module["module_name"] = module["module_name"].strip()
            
            # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω
            for discipline in module.get("disciplines", []):
                discipline["name"] = discipline["name"].strip()
    
    return curriculum_data

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    """
    csv_file = "ai.csv"
    output_file = "ai_curriculum_structured.json"
    
    try:
        print("üìö –ü–∞—Ä—Å–∏–Ω–≥ —É—á–µ–±–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –∏–∑ CSV —Ñ–∞–π–ª–∞...")
        
        # –ü–∞—Ä—Å–∏–º CSV
        curriculum_data = parse_curriculum_csv(csv_file)
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        curriculum_data = clean_module_names(curriculum_data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(curriculum_data, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –£—á–µ–±–Ω—ã–π –ø–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {output_file}")
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—á–µ–±–Ω–æ–≥–æ –ø–ª–∞–Ω–∞:")
        print(f"   –ü—Ä–æ–≥—Ä–∞–º–º–∞: {curriculum_data['program_info']['title']}")
        print(f"   –í—Å–µ–≥–æ –∑–∞—á–µ—Ç–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü: {curriculum_data['program_info']['total_credits']}")
        print(f"   –í—Å–µ–≥–æ —á–∞—Å–æ–≤: {curriculum_data['program_info']['total_hours']}")
        print(f"   –ë–ª–æ–∫–æ–≤: {curriculum_data['summary']['blocks_count']}")
        print(f"   –ú–æ–¥—É–ª–µ–π: {curriculum_data['summary']['modules_count']}")
        print(f"   –î–∏—Å—Ü–∏–ø–ª–∏–Ω: {curriculum_data['summary']['total_disciplines']}")
        
        print(f"\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–ª–æ–∫–æ–≤:")
        for block in curriculum_data["blocks"]:
            print(f"   –ë–ª–æ–∫ {block['block_number']}: {block['block_name']}")
            print(f"     –ó–∞—á–µ—Ç–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü: {block['total_credits']}")
            print(f"     –ß–∞—Å–æ–≤: {block['total_hours']}")
            print(f"     –ú–æ–¥—É–ª–µ–π: {len(block['modules'])}")
            
            for module in block["modules"]:
                print(f"       - {module['module_name']} ({module['credits']} –∑.–µ., {module['hours']} —á.)")
                print(f"         –î–∏—Å—Ü–∏–ø–ª–∏–Ω: {len(module['disciplines'])}")
        
        print(f"\nüìÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–µ–º–µ—Å—Ç—Ä–∞–º:")
        for semester, data in curriculum_data['summary']['semester_distribution'].items():
            if data['disciplines'] > 0:
                print(f"   {semester.replace('_', ' ').title()}: {data['credits']} –∑.–µ., {data['hours']} —á., {data['disciplines']} –¥–∏—Å—Ü–∏–ø–ª–∏–Ω")
        
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª {csv_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")

if __name__ == "__main__":
    main() 